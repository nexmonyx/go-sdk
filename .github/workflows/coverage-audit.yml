name: Monthly Coverage Audit

on:
  schedule:
    # Run at 2 AM UTC on the 1st of each month
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      generate_badge:
        description: 'Generate coverage badge'
        required: true
        default: 'true'

permissions:
  contents: write
  pull-requests: write

jobs:
  coverage-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run comprehensive coverage audit
        run: |
          chmod +x scripts/coverage_audit.sh
          ./scripts/coverage_audit.sh
        continue-on-error: false

      - name: Generate coverage badge
        if: success()
        run: |
          chmod +x scripts/generate-coverage-badge.sh
          ./scripts/generate-coverage-badge.sh coverage_reports/coverage_*.out
        continue-on-error: true

      - name: Track coverage history
        if: success()
        run: |
          chmod +x scripts/track-coverage-history.sh
          ./scripts/track-coverage-history.sh coverage_reports/coverage_*.out
        continue-on-error: true

      - name: Create audit summary
        if: always()
        run: |
          mkdir -p coverage_reports

          AUDIT_DATE=$(date '+%Y-%m-%d')
          COVERAGE=$(go tool cover -func=coverage_reports/coverage_*.out 2>/dev/null | grep "total:" | awk '{print $3}' || echo "N/A")

          cat > coverage_reports/audit_summary.md <<EOF
          # Monthly Coverage Audit - $AUDIT_DATE

          ## Coverage Metrics

          - **Total Coverage:** $COVERAGE
          - **Audit Type:** Automated Monthly
          - **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S UTC')

          ## Reports Available

          - Latest HTML Report: [View Coverage](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Coverage Trends: See \`coverage_reports/coverage_trends.md\`
          - History: See \`coverage_reports/coverage_history.csv\`

          ## Quality Gates

          - ‚úÖ Service Layer Target: ‚â•80%
          - ‚úÖ Package Target: ‚â•40%
          - ‚úÖ Badge Generated

          For full details, see the uploaded coverage artifacts.
          EOF

          cat coverage_reports/audit_summary.md

      - name: Upload coverage audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-audit-${{ github.run_id }}
          path: |
            coverage_reports/
            .coverage-badges/
          retention-days: 90

      - name: Comment on issues/PRs with coverage
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -f coverage_reports/audit_summary.md ]; then
            ISSUE=$(gh issue list --state open --label "coverage" --limit 1 --json number | jq -r '.[] | .number' 2>/dev/null || echo "")
            if [ ! -z "$ISSUE" ] && [ "$ISSUE" != "null" ]; then
              gh issue comment $ISSUE --body-file coverage_reports/audit_summary.md || echo "Could not post issue comment"
            fi
          fi
        continue-on-error: true

      - name: Create or update badge PR
        if: success() && github.event_name == 'schedule'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if coverage badge exists and has changed
          if [ -f .coverage-badges/coverage-badge.svg ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # Check for changes
            if git diff --quiet; then
              echo "No changes to coverage badge"
            else
              echo "Coverage badge updated"

              # Create branch
              BRANCH="chore/update-coverage-badge-$(date +%s)"
              git checkout -b "$BRANCH"
              git add .coverage-badges/ coverage_reports/
              git commit -m "chore: update coverage badge and history

- Update coverage badge with latest metrics
- Track coverage history trends
- Generated by monthly coverage audit

ü§ñ Automated by GitHub Actions"
              git push origin "$BRANCH"

              # Create PR
              gh pr create \
                --title "chore: update coverage badge and history" \
                --body "Monthly coverage audit results" \
                --label "automated,documentation" || echo "PR creation failed"
            fi
          fi
        continue-on-error: true

      - name: Generate summary report
        if: always()
        run: |
          echo "## Coverage Audit Complete ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Badge (SVG)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Trends" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage History" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See attached artifacts for details." >> $GITHUB_STEP_SUMMARY

  notify:
    if: failure()
    runs-on: ubuntu-latest
    needs: coverage-audit
    steps:
      - name: Send failure notification
        run: |
          echo "‚ö†Ô∏è Coverage audit failed"
          echo "Please check the workflow logs for details"
