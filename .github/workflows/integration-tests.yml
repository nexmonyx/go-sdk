name: Integration Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  integration-tests-mock:
    name: Integration Tests (Mock Mode)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-integration-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Build mock API Docker image
        run: |
          echo "Building mock API Docker image..."
          docker build -f tests/integration/docker/Dockerfile \
            -t nexmonyx-mock-api:local .

      - name: Start mock API container
        run: |
          echo "Starting mock API container..."
          docker run -d \
            --name mock-api \
            -p 8080:8080 \
            -e API_PORT=8080 \
            -e API_HOST=0.0.0.0 \
            -e AUTH_TOKEN=test-token \
            -e API_LOG_LEVEL=info \
            --health-cmd="curl -f http://localhost:8080/health || exit 1" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=5 \
            --health-start-period=10s \
            nexmonyx-mock-api:local

          echo "Waiting for container to start..."
          sleep 2
          docker ps -a

      - name: Wait for services to be ready
        run: |
          echo "Waiting for mock API server to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health; then
              echo "✓ Mock API server is ready"
              exit 0
            fi
            echo "Attempt $i/30 - waiting for mock API..."
            sleep 2
          done
          echo "✗ Timeout waiting for mock API server"
          exit 1

      - name: Run integration tests (mock mode)
        env:
          INTEGRATION_TESTS: "true"
          INTEGRATION_TEST_MODE: "mock"
          INTEGRATION_TEST_DEBUG: "false"
        run: |
          echo "Running integration tests with mock API server..."
          go test -v -race -coverprofile=integration-coverage.out -covermode=atomic \
            -timeout 10m ./tests/integration/...

      - name: Generate integration coverage report
        if: always() && hashFiles('integration-coverage.out') != ''
        run: |
          echo "## Integration Test Coverage" > integration-coverage-summary.md
          echo "" >> integration-coverage-summary.md

          COVERAGE=$(go tool cover -func=integration-coverage.out | grep total | awk '{print $3}')
          echo "**Total Coverage:** $COVERAGE" >> integration-coverage-summary.md
          echo "" >> integration-coverage-summary.md

          echo "### Coverage by File" >> integration-coverage-summary.md
          echo '```' >> integration-coverage-summary.md
          go tool cover -func=integration-coverage.out >> integration-coverage-summary.md
          echo '```' >> integration-coverage-summary.md

          cat integration-coverage-summary.md

      - name: Comment integration coverage on PR
        if: github.event_name == 'pull_request' && hashFiles('integration-coverage.out') != ''
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body-file integration-coverage-summary.md \
            --repo ${{ github.repository }} || echo "Could not post PR comment"

      - name: Upload integration coverage
        if: always() && hashFiles('integration-coverage.out') != ''
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: |
            integration-coverage.out
            integration-coverage-summary.md
          retention-days: 7

      - name: Stop and remove mock API container
        if: always()
        run: |
          echo "Stopping and removing mock API container..."
          docker stop mock-api || true
          docker rm mock-api || true
          echo "Container cleanup complete"

      - name: Check integration test results
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ All integration tests passed!"
          else
            echo "❌ Some integration tests failed. Please review the logs."
            exit 1
          fi

  workflow-tests:
    name: Workflow Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        workflow:
          - servers
          - organizations
          - alerts
          - monitoring

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-workflow-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-workflow-
            ${{ runner.os }}-go-

      - name: Run ${{ matrix.workflow }} workflow tests
        env:
          INTEGRATION_TESTS: "true"
          INTEGRATION_TEST_MODE: "mock"
        run: |
          echo "Running ${{ matrix.workflow }} workflow tests..."
          # Capitalize first letter for test function names
          WORKFLOW_NAME=$(echo ${{ matrix.workflow }} | sed 's/.*/\u&/')
          go test -v -race -timeout 5m \
            -run ".*${WORKFLOW_NAME}.*Workflow" \
            ./tests/integration/

  test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests-mock, workflow-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Integration Tests (Mock): ${{ needs.integration-tests-mock.result }}"
          echo "Workflow Tests: ${{ needs.workflow-tests.result }}"

          if [ "${{ needs.integration-tests-mock.result }}" != "success" ] || \
             [ "${{ needs.workflow-tests.result }}" != "success" ]; then
            echo "❌ Some tests failed"
            exit 1
          fi

          echo "✅ All integration tests passed!"
