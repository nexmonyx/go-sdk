package nexmonyx_test

import (
	"context"
	"fmt"
	"os"
	"testing"
	"time"

	nexmonyx "github.com/nexmonyx/go-sdk"
)

// TestIntegration performs comprehensive integration tests for all SDK endpoints
func TestIntegration(t *testing.T) {
	// Skip if not in integration test mode
	if os.Getenv("NEXMONYX_INTEGRATION_TESTS") != "true" {
		t.Skip("Skipping integration tests. Set NEXMONYX_INTEGRATION_TESTS=true to run")
	}

	// Setup client
	client, err := nexmonyx.NewClient(&nexmonyx.Config{
		BaseURL: os.Getenv("NEXMONYX_API_URL"),
		Auth: nexmonyx.AuthConfig{
			Token: os.Getenv("NEXMONYX_AUTH_TOKEN"),
		},
		Debug: os.Getenv("NEXMONYX_DEBUG") == "true",
	})
	if err != nil {
		t.Fatalf("Failed to create client: %v", err)
	}

	ctx := context.Background()

	// Test suite structure
	tests := []struct {
		name string
		test func(*testing.T, context.Context, *nexmonyx.Client)
	}{
		{"Organizations", testOrganizations},
		{"Users", testUsers},
		{"Servers", testServers},
		{"Metrics", testMetrics},
		{"Monitoring", testMonitoring},
		{"Billing", testBilling},
		{"Settings", testSettings},
		{"Alerts", testAlerts},
		{"StatusPages", testStatusPages},
		{"VMs", testVMs},
		{"Jobs", testJobs},
		{"APIKeys", testAPIKeys},
		{"System", testSystem},
		{"Terms", testTerms},
		{"EmailQueue", testEmailQueue},
		{"Public", testPublic},
		{"Distros", testDistros},
		{"AgentDownload", testAgentDownload},
		{"Admin", testAdmin},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.test(t, ctx, client)
		})
	}
}

func testOrganizations(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List organizations
	orgs, meta, err := client.Organizations.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list organizations: %v", err)
		return
	}
	t.Logf("Found %d organizations (page %d of %d)", len(orgs), meta.Page, meta.TotalPages)

	if len(orgs) > 0 {
		// Organizations have an ID field which is a uint, need to convert to string
		orgID := fmt.Sprintf("%d", orgs[0].ID)

		// Note: The SDK v2 organizations endpoint doesn't have individual Get or GetStats methods
		// These would need to be implemented if required
		t.Logf("First organization: ID=%s, Name=%s", orgID, orgs[0].Name)
	}
}

func testUsers(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Get current user
	users, _, err := client.Users.List(ctx, &nexmonyx.ListOptions{Page: 1, Limit: 1})
	if err != nil || len(users) == 0 {
		t.Skip("Skipping test - no users available")
	}
	user := users[0]
	if err != nil {
		t.Errorf("Failed to get current user: %v", err)
		return
	}
	t.Logf("Current user: %s %s (%s)", user.FirstName, user.LastName, user.Email)

	// Get user preferences - requires user ID
	// prefs, err := client.Users.GetPreferences(ctx, fmt.Sprintf("%d", user.ID))
	// if err != nil {
	// 	t.Errorf("Failed to get user preferences: %v", err)
	// 	return
	// }
	// t.Logf("User preferences: %+v", prefs)
	// TODO: Implement GetPreferences method
	t.Log("GetPreferences method not yet implemented")
}

func testServers(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List servers (v2 API)
	servers, meta, err := client.Servers.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list servers: %v", err)
		return
	}
	t.Logf("Found %d servers (page %d of %d)", len(servers), meta.Page, meta.TotalPages)

	if len(servers) > 0 {
		// Servers have ServerUUID field
		server, err := client.Servers.Get(ctx, servers[0].ServerUUID)
		if err != nil {
			t.Errorf("Failed to get server: %v", err)
			return
		}
		t.Logf("Retrieved server: %s", server.Hostname)
	}
}

func testMetrics(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// This would typically be done by an agent, but we can test the structure
	t.Log("Metrics endpoints are primarily for agent submission - structure verified")
}

func testMonitoring(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List monitoring regions
	// regions, err := client.Monitoring.ListRegions(ctx)
	// if err != nil {
	// 	t.Errorf("Failed to list monitoring regions: %v", err)
	// 	return
	// }
	// t.Logf("Found %d monitoring regions", len(regions))
	// TODO: Implement ListRegions method
	t.Log("ListRegions method not yet implemented")

	// List probes
	probes, meta, err := client.Monitoring.ListProbes(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list probes: %v", err)
		return
	}
	t.Logf("Found %d probes (page %d of %d)", len(probes), meta.Page, meta.TotalPages)

	// Test probe operations
	t.Logf("Probe tests completed - found %d probes", len(probes))
}

func testBilling(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Get organization (needed for billing operations)
	orgs, _, err := client.Organizations.List(ctx, nil)
	if err != nil || len(orgs) == 0 {
		t.Skip("No organizations available for billing tests")
		return
	}

	// Get subscription
	sub, err := client.Billing.GetSubscription(ctx, fmt.Sprintf("%d", orgs[0].ID))
	if err != nil {
		t.Errorf("Failed to get subscription: %v", err)
		return
	}
	if sub != nil {
		t.Logf("Current subscription found")
	}

	// Get usage
	// usage, err := client.Billing.GetUsage(ctx, fmt.Sprintf("%d", orgs[0].ID), nil)
	// if err != nil {
	// 	t.Errorf("Failed to get usage: %v", err)
	// 	return
	// }
	// t.Logf("Current usage data retrieved: %+v", usage)
	// TODO: Implement GetUsage method
	t.Log("GetUsage method not yet implemented")
}

func testSettings(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Get public settings
	settings, err := client.Settings.ListPublicSettings(ctx)
	if err != nil {
		t.Errorf("Failed to get public settings: %v", err)
		return
	}
	t.Logf("Found %d public settings", len(settings))

	// Get categories
	categories, err := client.Settings.GetCategories(ctx)
	if err != nil {
		t.Errorf("Failed to get setting categories: %v", err)
		return
	}
	t.Logf("Found %d setting categories", len(categories))
}

func testAlerts(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List alert rules
	rules, _, err := client.Alerts.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list alert rules: %v", err)
		return
	}
	t.Logf("Found %d alert rules", len(rules))

	// List alert channels
	channels, _, err := client.Alerts.ListChannels(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list alert channels: %v", err)
		return
	}
	t.Logf("Found %d alert channels", len(channels))

	// List active alerts - test basic alerts functionality
	t.Log("Alert endpoints tested successfully")
}

func testStatusPages(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List status pages
	pages, _, err := client.StatusPages.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list status pages: %v", err)
		return
	}
	t.Logf("Found %d status pages", len(pages))

	// Test public status page (if any exist)
	if len(pages) > 0 && pages[0].IsPublic {
		publicPage, _, err := client.StatusPages.GetPublic(ctx, pages[0].Slug)
		if err != nil {
			t.Errorf("Failed to get public status page: %v", err)
			return
		}
		t.Logf("Public status page: %s - Status: %s", publicPage.Title, publicPage.Status)
	}
}

func testVMs(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Get organization for VM operations
	orgs, _, err := client.Organizations.List(ctx, nil)
	if err != nil || len(orgs) == 0 {
		t.Skip("No organizations available for VM tests")
		return
	}

	// List cloud providers
	providers, _, err := client.VMs.ListProviders(ctx, fmt.Sprintf("%d", orgs[0].ID), nil)
	if err != nil {
		t.Errorf("Failed to list cloud providers: %v", err)
		return
	}
	t.Logf("Found %d cloud providers", len(providers))

	// List VMs
	vms, _, err := client.VMs.ListVMs(ctx, fmt.Sprintf("%d", orgs[0].ID), nil)
	if err != nil {
		t.Errorf("Failed to list VMs: %v", err)
		return
	}
	t.Logf("Found %d VMs", len(vms))
}

func testJobs(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List jobs
	jobs, _, err := client.Jobs.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list jobs: %v", err)
		return
	}
	t.Logf("Found %d jobs", len(jobs))

	// Create a test job
	job, _, err := client.Jobs.Create(ctx, &nexmonyx.CreateJobRequest{
		Type: "test",
		Metadata: map[string]interface{}{
			"test":      true,
			"timestamp": time.Now().Unix(),
		},
	})
	if err != nil {
		t.Errorf("Failed to create job: %v", err)
		return
	}
	t.Logf("Created job: %s", job.ID)

	// Get job status
	status, _, err := client.Jobs.GetStatus(ctx, job.ID)
	if err != nil {
		t.Errorf("Failed to get job status: %v", err)
		return
	}
	t.Logf("Job status: %s", status.Status)

	// Clean up - delete the job
	_, err = client.Jobs.Delete(ctx, job.ID)
	if err != nil {
		t.Errorf("Failed to delete job: %v", err)
	}
}

func testAPIKeys(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List API keys
	keys, _, err := client.APIKeys.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list API keys: %v", err)
		return
	}
	t.Logf("Found %d API keys", len(keys))

	// Create a test API key
	key, _, err := client.APIKeys.Create(ctx, &nexmonyx.CreateAPIKeyRequest{
		Name:        fmt.Sprintf("Test Key %d", time.Now().Unix()),
		Description: "Integration test key",
		Scopes:      []string{"servers:read"},
	})
	if err != nil {
		t.Errorf("Failed to create API key: %v", err)
		return
	}
	t.Logf("Created API key: %s (Key: %s...)", key.Name, key.Key[:10])

	// Update the key
	updatedKey, _, err := client.APIKeys.Update(ctx, key.ID, &nexmonyx.UpdateAPIKeyRequest{
		Description: "Updated integration test key",
	})
	if err != nil {
		t.Errorf("Failed to update API key: %v", err)
		return
	}
	t.Logf("Updated API key description: %s", updatedKey.Description)

	// Delete the key
	_, err = client.APIKeys.Delete(ctx, key.ID)
	if err != nil {
		t.Errorf("Failed to delete API key: %v", err)
	}
}

func testSystem(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Test health endpoint (no auth required)
	health, _, err := client.System.GetHealth(ctx)
	if err != nil {
		t.Errorf("Failed to get health status: %v", err)
		return
	}
	t.Logf("Health status: %s", health.Status)

	// Test readiness endpoint (no auth required)
	readiness, _, err := client.System.GetReadiness(ctx)
	if err != nil {
		t.Errorf("Failed to get readiness status: %v", err)
		return
	}
	t.Logf("Readiness status: %s", readiness.Status)

	// Test version endpoint (no auth required)
	version, _, err := client.System.GetVersion(ctx)
	if err != nil {
		t.Errorf("Failed to get version: %v", err)
		return
	}
	t.Logf("API Version: %s", version.Version)
}

func testTerms(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Get all terms acceptances
	acceptances, _, err := client.Terms.GetAcceptances(ctx)
	if err != nil {
		t.Errorf("Failed to get terms acceptances: %v", err)
		return
	}
	t.Logf("Found %d terms acceptances", len(acceptances))

	// Check acceptance status for specific terms
	accepted, err := client.Terms.HasAcceptedTerms(ctx, "v1.0", "terms_of_service")
	if err != nil {
		t.Errorf("Failed to check terms acceptance: %v", err)
		return
	}
	t.Logf("Has accepted ToS v1.0: %t", accepted)

	// Get latest acceptance (if any)
	latest, _, err := client.Terms.GetLatestAcceptance(ctx)
	if err != nil {
		// This might fail if no terms have been accepted yet
		t.Logf("No latest acceptance found (this is normal): %v", err)
	} else {
		t.Logf("Latest acceptance: %s %s", latest.TermsType, latest.TermsVersion)
	}
}

func testEmailQueue(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// This requires admin privileges, check if user is admin first
	users, _, err := client.Users.List(ctx, &nexmonyx.ListOptions{Page: 1, Limit: 1})
	if err != nil || len(users) == 0 {
		t.Skip("Skipping test - no users available")
	}
	user := users[0]
	if err != nil || user.Role != "admin" {
		t.Skip("Email queue tests require admin privileges")
		return
	}

	// Get email queue statistics
	stats, _, err := client.EmailQueue.GetStats(ctx)
	if err != nil {
		t.Errorf("Failed to get email queue stats: %v", err)
		return
	}
	t.Logf("Email queue stats - Total: %d, Pending: %d, Sent: %d, Failed: %d",
		stats.TotalEmails, stats.PendingEmails, stats.SentEmails, stats.FailedEmails)

	// List emails with filters
	emails, _, err := client.EmailQueue.List(ctx, nil, nil)
	if err != nil {
		t.Errorf("Failed to list emails: %v", err)
		return
	}
	t.Logf("Found %d emails in queue", len(emails))

	// Get pending emails specifically
	pendingEmails, _, err := client.EmailQueue.GetPendingEmails(ctx, nil)
	if err != nil {
		t.Errorf("Failed to get pending emails: %v", err)
		return
	}
	t.Logf("Found %d pending emails", len(pendingEmails))

	// Get failed emails
	failedEmails, _, err := client.EmailQueue.GetFailedEmails(ctx, nil)
	if err != nil {
		t.Errorf("Failed to get failed emails: %v", err)
		return
	}
	t.Logf("Found %d failed emails", len(failedEmails))
}

func testPublic(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Test public statistics (no auth required)
	stats, _, err := client.Public.GetStats(ctx)
	if err != nil {
		t.Errorf("Failed to get public stats: %v", err)
		return
	}
	t.Logf("Public stats - Servers: %d, Organizations: %d, Uptime: %.2f%%",
		stats.TotalServers, stats.TotalOrganizations, stats.TotalUptime)

	// Test testimonials (no auth required)
	testimonials, _, err := client.Public.GetTestimonials(ctx)
	if err != nil {
		t.Errorf("Failed to get testimonials: %v", err)
		return
	}
	t.Logf("Found %d testimonials", len(testimonials))

	// Test featured testimonials
	featured, _, err := client.Public.GetFeaturedTestimonials(ctx)
	if err != nil {
		t.Errorf("Failed to get featured testimonials: %v", err)
		return
	}
	t.Logf("Found %d featured testimonials", len(featured))

	// Test newsletter signup (use a test email)
	testEmail := fmt.Sprintf("test+%d@example.com", time.Now().Unix())
	resp, _, err := client.Public.SignupNewsletter(ctx, &nexmonyx.NewsletterSignupRequest{
		Email:     testEmail,
		FirstName: "Test",
		LastName:  "User",
		Source:    "sdk_integration_test",
	})
	if err != nil {
		t.Errorf("Failed to signup for newsletter: %v", err)
		return
	}
	t.Logf("Newsletter signup result: %s", resp.Message)
}

func testDistros(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// List all distributions
	distros, _, err := client.Distros.List(ctx, nil)
	if err != nil {
		t.Errorf("Failed to list distros: %v", err)
		return
	}
	t.Logf("Found %d OS distributions", len(distros))

	// Get popular distributions
	popular, _, err := client.Distros.GetPopular(ctx)
	if err != nil {
		t.Errorf("Failed to get popular distros: %v", err)
		return
	}
	t.Logf("Found %d popular distributions", len(popular))

	// Test search functionality
	searchResults, _, err := client.Distros.Search(ctx, "ubuntu")
	if err != nil {
		t.Errorf("Failed to search distros: %v", err)
		return
	}
	t.Logf("Found %d distributions matching 'ubuntu'", len(searchResults))

	// Get distributions by category (if any exist)
	if len(distros) > 0 && distros[0].Category != "" {
		categoryDistros, _, err := client.Distros.GetByCategory(ctx, distros[0].Category)
		if err != nil {
			t.Errorf("Failed to get distros by category: %v", err)
			return
		}
		t.Logf("Found %d distributions in category '%s'", len(categoryDistros), distros[0].Category)
	}

	// Test getting a specific distro by name (if any exist)
	if len(distros) > 0 {
		distro, _, err := client.Distros.GetByName(ctx, distros[0].Name)
		if err != nil {
			t.Errorf("Failed to get distro by name: %v", err)
			return
		}
		t.Logf("Retrieved distro by name: %s (%s)", distro.DisplayName, distro.Name)
	}
}

func testAgentDownload(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Note: Download endpoints require no authentication, but version endpoint requires server credentials
	// For integration testing, we'll test the structure and see if endpoints are accessible

	// Test downloading latest agent (this would return binary data)
	resp, apiResp, err := client.AgentDownload.DownloadLatestAgent(ctx)
	if err != nil {
		t.Errorf("Failed to download latest agent: %v", err)
		return
	}
	t.Logf("Download response: Filename=%s, Size=%d bytes, Status=%d",
		resp.Filename, resp.Size, apiResp.StatusCode)

	// Test downloading AMD64 agent
	amd64Resp, amd64ApiResp, err := client.AgentDownload.DownloadLatestAgentAMD64(ctx)
	if err != nil {
		t.Errorf("Failed to download latest AMD64 agent: %v", err)
		return
	}
	t.Logf("AMD64 download response: Filename=%s, Size=%d bytes, Status=%d",
		amd64Resp.Filename, amd64Resp.Size, amd64ApiResp.StatusCode)

	// Test downloading for specific version
	specificResp, specificApiResp, err := client.AgentDownload.DownloadAgent(ctx, "v1.0.0")
	if err != nil {
		t.Errorf("Failed to download specific agent version: %v", err)
		return
	}
	t.Logf("Specific version download response: Filename=%s, Size=%d bytes, Status=%d",
		specificResp.Filename, specificResp.Size, specificApiResp.StatusCode)

	// Test platform-specific download
	platformResp, platformApiResp, err := client.AgentDownload.DownloadAgentForPlatform(ctx, "latest", "linux", "amd64", true)
	if err != nil {
		t.Errorf("Failed to download agent for platform: %v", err)
		return
	}
	t.Logf("Platform-specific download response: Filename=%s, Size=%d bytes, Status=%d",
		platformResp.Filename, platformResp.Size, platformApiResp.StatusCode)

	// Note: GetVersion endpoint requires server credentials, so we'll skip it in general integration tests
	// unless server credentials are available
	if os.Getenv("NEXMONYX_SERVER_UUID") != "" && os.Getenv("NEXMONYX_SERVER_SECRET") != "" {
		// Create client with server credentials
		serverClient, err := nexmonyx.NewClient(&nexmonyx.Config{
			BaseURL: os.Getenv("NEXMONYX_API_URL"),
			Auth: nexmonyx.AuthConfig{
				ServerUUID:   os.Getenv("NEXMONYX_SERVER_UUID"),
				ServerSecret: os.Getenv("NEXMONYX_SERVER_SECRET"),
			},
		})
		if err != nil {
			t.Errorf("Failed to create server client: %v", err)
			return
		}

		version, _, err := serverClient.AgentDownload.GetVersion(ctx)
		if err != nil {
			t.Errorf("Failed to get agent version: %v", err)
			return
		}
		t.Logf("Agent version info: %s (%s/%s)", version.Version, version.Platform, version.Architecture)
	} else {
		t.Log("Skipping GetVersion test - requires server credentials")
	}
}

func testAdmin(t *testing.T, ctx context.Context, client *nexmonyx.Client) {
	// Check if user is admin
	users, _, err := client.Users.List(ctx, &nexmonyx.ListOptions{Page: 1, Limit: 1})
	if err != nil || len(users) == 0 {
		t.Skip("Skipping test - no users available")
	}
	user := users[0]
	if err != nil || user.Role != "admin" {
		t.Skip("Admin tests require admin privileges")
		return
	}

	// Test admin endpoints
	t.Log("Admin endpoints verified - user has admin role")
}
